dir.create("testdir2/testdir3", recursive = TRUE)
file.delete("testdir2")
dir.delete("testdir2")
dir.create("testdir2/testdir3", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- numeric(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Simeon")
my_name
paste(my_name, collpase = "")
paste(my_name, collpase = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data ==NA
sum(my_na)
my_data
0/0
Inf-Inf
install.packages()
install.packages("XLConnect")
seturl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- read.csv(seturl)
data[data$VAL == 24,]
data
data$VAL
updated <- data$VAl
updated2 <- na.omit(updated)
nrow(updated2 ==24 )
updated2
updated
updated <- data$VAL
updated
updated2 <- na.omit(updated)
updated2
nrow(updated2 == 24)
updated2[updated2 == 24, ]
class(updated2)
data
data[data$VAL != 0, ]
updated <- data[data$VAL != 0, ]
updated <- data[data$VAL != NA, ]
updated
updated <- data[data$VAL != 0, ]
data[data$VAL == 24, ]
data
updated <- data$VAL
updated
class(updated)
updated <- na.omit(updated)
updated
subset(data, data$VAL == 24, select data$VAL)
subset(data, data$VAL == 24, select = data$VAL)
subset(data, VAL == 24, select = VAL)
length(subset(data, VAL == 24, select = VAL))
updated <- subset(data, VAL == 24, select = VAL)
class(updated)
nrow(updated)
seturl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
data <- read.csv(seturl)
seturl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
acs <- read.csv(seturl)
acs
?sqldf
install.packages(sqldf)
install.packages("sqldf")
?sqldf
sqldf("select pwgtp1 from acs")
library(sqldf)
?sqldf
sqldf("select pwgtp1 from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
read.table.url("http://biostat.jhsph.edu/~jleek/contact.html")
read.table("http://biostat.jhsph.edu/~jleek/contact.html")
read.table("http://biostat.jhsph.edu/~jleek/contact.html", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
url("http://biostat.jhsph.edu/~jleek/contact.html")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
?close
close(con)
htmlCode
?nchar
nchar(htmlCode(10))
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
con <-url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
htmlCode = readLines(con)
close(con)
htmlCode
nchar(htmlCode[10])
con[, 4]
library(ggplot2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
?transform
candidates <- c( Sys.getenv("R_PROFILE"),
file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),
Sys.getenv("R_PROFILE_USER"),
file.path(getwd(), ".Rprofile") )
Filter(file.exists, candidates)
μ <- 80
SD <- 10
target <- 70
?pnorm
pnorm(target, mean = μ, sd = SD)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
?pbinom
pbinom(3, size = 5, prob = 0.5)
1-0.8125
pbinom(3, size = 5, prob = 0.5, upper.tail = TRUE)
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
pnorm(14, mean = 15, sd = 1, lower.tail = FALSE)
a <- pnorm(14, mean = 15, sd = 1, lower.tail = FALSE)
b <- pnorm(16, mean = 15, sd = 1, lower.tail = FALSE)
a-b
qnorm(0.5, mean = 0.5, sd = 1/(12*sqrt(1000)))
?pos
?ppos
?ppois
ppois(10, 15)
?t.test
1100 + c(-1,1)*qt(0.95, 8)*30/sqrt(9)
1100 + c(-1,1)*qt(0.975, 8)*30/sqrt(9)
6/qt(0.975,8)
2 + c(-1,1)*qt(0.975, 9)*sqrt(0.08)/sqrt(10)
2 + c(-1,1)*qt(0.975, 9)*(sqrt(0.68)-sqrt(0.6))/sqrt(10)
-2 + c(-1,1)*qt(0.975, 9)*(sqrt(0.6)-sqrt(0.68))/sqrt(10)
sp <- sqrt((9*0.6+9*0.68)/18)
semd <- sp*sqrt(1/5)
-2+c(-1,1)*qt(.975, 18)*semd
-2+c(-1,1)*qt(.95, 18)*semd
?qt
?qz
sp <- sqrt((99*0.5+99*2)/198)
semd <- sp*sqrt(1/99 + 1/99)
2+c(-1,1)*qnorm(.975)*semd
sp <- sqrt((8*(1.5)^2+8*1.8^2)/16)
semd <- sp*sqrt(1/9 + 1/9)
-4+c(-1,1)*qt(.95, 16)*semd
rexp(40, 0.2)
hist(runif(1000))
hist(runif(1000))
hist(runif(1000))
hist(runif(1000))
head(ToothGrowth)
summary(ToothGrowth)
?ggplot
library(ggplot2)
?ggplot
head(ToothGrowth)
?agg
?aggregate
?ggplot
library(ggplot)
library(ggplot2)
?ggplot
head(ToothGrowth)
g <- ggplot(ToothGrowth, aes(x = dose, y = len)) + geom_point(subset(ToothGrowth, sup %in% c("VC", "OJ")))
g <- ggplot(ToothGrowth, aes(x = dose, y = len)) + geom_point(subset(ToothGrowth, supp %in% c("VC", "OJ")))
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ")))
g
?ggplot
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_line(aes( x = dose, y = len))
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_line(aes( x = dose, y = len, group = supp, colour = supp))
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = supp, colour = supp))
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose))
g
library(ggplot2)
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose)) + facet_grid(supp ~ .)
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose)) + facet_grid(~ supp.)
g
?facet_grid
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose)) + facet_grid(. ~ supp)
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = "green")) + facet_grid(. ~ supp)
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose)) + facet_grid(. ~ supp)
g
g <- ggplot() + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose)) + facet_grid(. ~ supp)
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose)) + facet_grid(. ~ supp)
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp)
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp) + ggtitle("Analysis of Tooth Growth by Increasing Dose & Supp Type") + theme(plot.title = element_text(lineheight=.8, face="bold"))
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp) + ggtitle("Analysis of Tooth Growth by Increasing Dose & Supp Type") + theme(plot.title = element_text(lineheight=.10, face="bold"))
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp) + ggtitle("Analysis of Tooth Growth by Increasing Dose & Supp Type") + theme(plot.title = element_text(lineheight=.40, face="bold"))
g
ToothGrowth
?t.test
a <- subset(ToothGrowth, dose==0.5 && dose==1.0)
a
class()
class(a)
summary(a)
a <- subset(ToothGrowth, dose==0.5)
a
a <- subset(ToothGrowth, dose==0.5&&1.0)
a
a <- subset(ToothGrowth, (dose==0.5 && dose==1.0))
a
a <- subset(ToothGrowth, dose<2.0)
a
ToothGrowth
a
dose_0.5 <- subset(ToothGrowth, dose==0.5)
t.test(len~supp, data=a, paired=FALSE)
dose_0.5 <- subset(ToothGrowth, dose==0.5)
t.test(len~supp, data=dose_0.5, paired=FALSE)
dose_1.0 <- subset(ToothGrowth, dose==1.0)
t.test(len~supp, data=dose_1.0, paired=FALSE)
dose_2.0 <- subset(ToothGrowth, dose==2.0)
t.test(len~supp, data=dose_2.0, paired=FALSE)
dose_0.5 <- subset(ToothGrowth, dose==0.5)
t.test(len~supp, data=dose_0.5, paired=FALSE)
dose_1.0 <- subset(ToothGrowth, dose==1.0)
t.test(len~supp, data=dose_1.0, paired=FALSE)
dose_2.0 <- subset(ToothGrowth, dose==2.0)
t.test(len~supp, data=dose_2.0, paired=FALSE)
?anova
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp) + ggtitle("Analysis of Tooth Growth by Increasing Dose & Supp Type") + theme(plot.title = element_text(lineheight=.40, face="bold"))
library(ggplot2)
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp) + ggtitle("Analysis of Tooth Growth by Increasing Dose & Supp Type") + theme(plot.title = element_text(lineheight=.40, face="bold"))
g
?geom_line
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp) + ggtitle("Analysis of Tooth Growth by Increasing Dose & Supp Type") + theme(plot.title = element_text(lineheight=.40, face="bold")) + geom_line(colour = "red", size = 1)
g
geom_line(aes(x = dose, y = len),colour = "red", size = 1)
g
g <- ggplot(subset(ToothGrowth, supp %in% c("VC", "OJ"))) + geom_boxplot(aes( x = dose, y = len, group = dose, colour = dose, fill = dose)) + facet_grid(. ~ supp) + ggtitle("Analysis of Tooth Growth by Increasing Dose & Supp Type") + theme(plot.title = element_text(lineheight=.40, face="bold")) + geom_line(aes(x = dose, y = len),colour = "red", size = 1)
g
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
minu <- sum(x*w)/sum(w)
final <- sum(w*(x-minu)^2)
c(minu, final)
x <- c(x,x*-1)
y <- c(y,y*-1)
mean(y)
plot(x,y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(x,x*-1)
y <- c(y,y*-1)
mean(y)
plot(x,y)
cor(x,y) *sd(y)/sd(x)
data(mtcars)
mtcars
y <- mtcars$mpg
x <- mtcars$wt
y <- c(y, y*-1)
x <- c(x, x*-1)
plot(x,y)
cor(x,y) *sd(y)/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(y,x)
b1 <- cor(x,y)*sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
lm(y ~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
est<-predict(fit,data.frame(x))
plot(x,y)
abline(fit,col="red")
summary(fit)
mtcars
fit<-lm(mtcars$mpg~mtcars$weight)
fit<-lm(mtcars$mpg~mtcars$wt)
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(mtcars$wt=mean(mtcars$wt)), interval="confidence")
??mtcars
x <- mtcars$wt
y <- mtcars$mpg
fit<-lm(y~x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
x2 <- 3*x
fit<-lm(y~x2)
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x2=mean(x2)), interval="confidence")
predict(fit,data.frame(x=3, interval="prediction")
)
predict(fit,data.frame(x=3), interval="prediction")
fit<-lm(y~x)
predict(fit,data.frame(x=3), interval="prediction")
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
fit <- lm(mpg ~ cyl + wt, mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
max(hatvalues(fit))
?shuttle
library(MASS)
?shuttle
head(shuttle)
InsectSprays
head(InsectSprays)
fit<-glm(count~factor(spray)-1,data=InsectSprays,family=poisson)
summary(fit)$coef
?exp
exp(coef(fit))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel$y <- factor(vowel$y)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
suppressMessages(library(caret))
set.seed(33833)
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
rf.result <- predict(rfmodel, vowel.test)
gbm.result <- predict(gbmmodel, vowel.test)
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
suppressMessages(library(caret))
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
install.packages("e1071")
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
data(spam)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
inTrain
summary(inTrain)
head(inTrain)
training <- spam[inTrain,]
head(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?histogram
histogram( ~SuperPlasticizer, data = training, xlab = "x", ylab = "y")
histogram( ~Superplasticizer, data = training, xlab = "x", ylab = "y")
histogram( ~Superplasticizer, data = testing, xlab = "x", ylab = "y")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
adData
head(adData)
IL_str <- grep("^IL", colnames(training), value = TRUE)
head(IT_str)
head(IL_str)
IL_str
training[IL_str, ]
training[ ,IL_str ]
?preProcess
preprocessed <- preProcessed(training[, IL_str], method="pca", thresh = 0.9)
preprocessed <- preProcess(training[, IL_str], method="pca", thresh = 0.9)
preprocessed
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain_IL <- createDataPartition(df$predictors_IL, p = 3/4)[[1]]
inTrain_IL <- createDataPartition(df$diagnosis, p = 3/4)[[1]]
training <- df[inTrain_IL, ]
testing <- df[-inTrain_IL, ]
modelFit <- train(diagnosis ~., method = "glm", data = training)
modelFit
preprocessed <- preProcess(training[, IL_str], method="pca", thresh = 0.8)
preprocessed
women
setwd("C:/Users/Simeon/Desktop/R Language/Data Products")
runApp()
library(shiny)
setwd("C:/Users/Simeon/Desktop/R Language/Data Products")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(list(
ui = bootstrapPage(
numericInput('n', 'Number of obs', 100),
textOutput('text1'),
tags$head(tags$style("#text1{color: red;
font-size: 20px;
font-style: italic;
}"
)
)
),
server = function(input, output) {
output$text1 <- renderText({ paste("hello input is",input$n) })
}
))
